{
    "Hair/Curves": {
        "Rotate along root": {
            "addcode": "vector root = point(0,\"P\",primpoint(0,@primnum,0));\n\n@P -= root;\n\nvector dir = prim(0,\"N\",@primnum);\nfloat angle = chf(\"angle\")*180;//* (rand(@primnum)-0.5);\nvector4 q = quaternion(radians(angle),dir);\nv@P = qrotate(q,v@P);\n\nv@P += root;\n\n\n\n\n\n"
        },
        "curveU psacle": {
            "addcode": "float u = float(vertexprimindex(0,@vtxnum))/(@numvtx -1);\nf@pscale = chf(\"psacle\")*chramp(\"u\",u);"
        }
    },
    "Masking": {
        "Slide CenterWidth Mask": {
            "addcode": "float u = float(vertexprimindex(0,@vtxnum))/(@numvtx -1);\nfloat c = chf(\"center\");\nfloat w = chf(\"width\");\nc = fit01(c,-w,1+w);\nv@Cd = fit(u,c-w,c+w,0,1);\n\n\n\n\n\n\n\n\n\n"
        },
        "Y Normal Mask": {
            "addcode": "f@mask = chramp(\"Y_mask\",0.5+0.5*dot(v@N,{0,1,0}));\nv@Cd = f@mask;\n\n\n\n"
        }
    },
    "Modelling": {
        "Axis on Poly": {
            "addcode": "vector center = primuv (0,'P',i@primnum,{0.5,0.5,0});\nvector dx = primuv (0,'P',i@primnum,{0.6,0.5,0});\nvector dy = primuv (0,'P',i@primnum,{0.5,0.6,0});\n\ndx = normalize(dx-center);\ndy = normalize(dy-center);\nvector dz = cross(dx,dy);\n\ncenter += chv(\"offset\")*set(dx,dy,dz);\n\nint pt = addpoint(0,center);\nsetpointattrib(0,'N',pt,dy);\nsetpointattrib(0,'up',pt,dz);\n\nsetpointattrib(0,'pscale',pt,chf(\"pscale\"));\n\nremoveprim(0,i@primnum,1);\n\n\n\n\n\n\n\n"
        },
        "Get Bbox": {
            "addcode": "int i = npoints(1) > 0;\n@bx = clamp(relbbox(i,@P).x,0,1);\n@by = clamp(relbbox(i,@P).y,0,1);\n@bz = clamp(relbbox(i,@P).z,0,1);\n"
        },
        "P: StickToUvs": {
            "addcode": "v@P = primuv (1,'P',i@sourceprim,v@sourceprimuv);"
        },
        "Polar Transforms": {
            "addcode": "vector pos = v@P;\nvector polar = topolar(pos);\npolar += chv(\"polar_offset\") * polar.z;\nvector P = frompolar(polar);\n@P = P;\n",
            "lib": [
                "lzn"
            ]
        },
        "Rotated RelBbox": {
            "addcode": "#include <lzn.h>\nvector yax = point(1,\"P\",4) - point(1,\"P\",0);\nvector xax = point(1,\"P\",1) - point(1,\"P\",0);\nvector zax = point(1,\"P\",3) - point(1,\"P\",0);\nvector p = point(1,\"P\",0);\n\nfloat yd,xd,zd;\nyd = length(yax);\nxd = length(xax);\nzd = length(zax);\n\nyax = normalize(yax);\nxax = normalize(xax);\nzax = normalize(zax);\n\nmatrix m = maketransform(zax,yax,p);\n\n@P = @P*invert(m); \nf@bx = @P.x / xd;\nf@by = @P.y / yd;\nf@bz = @P.z / zd;\n@P = @P*m; \n \n@bx = saturate(@bx);\n@by = saturate(@by);\n@bz = saturate(@bz);\n"
        },
        "mask: byDir": {
            "addcode": "vector dir = normalize(chv('dir'));\nf@mask = chramp('dot_ramp',0.5*dot(v@N,dir)+0.5);\nv@Cd = f@mask;"
        },
        "move out of collisions": {
            "addcode": "float d = volumesample(1,0,@P) - chf(\"offset\");\nvector g = volumegradient(1,0,@P);\n\nif( d<0)\n    v@P -= normalize(g)*d;\n"
        },
        "move out of vdb sdf": {
            "addcode": "float d = volumesample(1,0,@P) - chf(\"offset\");\nvector g = volumegradient(1,0,@P);\n\nif( d<0)\n    v@P -= normalize(g)*d;\n"
        }
    },
    "Other": {
        "ILM Cluster": {
            "addcode": "#include <lzn.h>\nfloat maxdistance = chf(\"maxdistance\");\nint maxpoints = chi(\"maxpoints\");\nfloat resample = chf(\"resample\");\n\nint nearpts[] = pcfind(0, \"P\", @P, maxdistance, maxpoints);\nforeach(int ptnum;nearpts)\n{\n    vector closepos = point(0, \"P\", ptnum);\n    int naddpts = floor(length(@P - closepos)/resample);\n    \n    for(int i=1;i<naddpts;i++)\n    {\n        vector n1 = ch('a1') * apvn(@P * ch('f1')+ set(i,ptnum,i));\n        addpoint(0, @P + normalize(closepos - @P)*i*resample  + n1); \n    }\n}\n\n\n\n"
        },
        "Phys Anim": {
            "addcode": "vector a = {0,-9.8,0};\n@P += v@v*@Time + a*@Time*@Time*0.5;\n\nmatrix3 t = primintrinsic(0,'transform',@ptnum);\nrotate(t,length(v@w)*@Time,normalize(v@w));\nsetprimintrinsic (0,'transform',@ptnum,t);\n\nif(chi(\"correct_ground\"))\n    @P.y = max(@P.y,0);"
        }
    },
    "Packeds": {
        "Packed to rest": {
            "addcode": "setprimintrinsic (0,'transform',@ptnum,matrix3());\nv@P = 0;"
        },
        "Packeds to points": {
            "addcode": "matrix3 t = primintrinsic(0,'transform',@primnum);\nint pt = addpoint(0,@P);\nvector4 orient = quaternion(t);\nvector pivot = primintrinsic(0,'pivot',@ptnum);\nvector scale = cracktransform(0, 0, 2, v@pivot,t);\nsetpointattrib(0,'orient',pt,orient);\nsetpointattrib(0,'pivot',pt,pivot);\nsetpointattrib(0,'scale',pt,scale);\nremoveprim(0,@primnum,1);"
        },
        "Rotate Packeds": {
            "addcode": "vector axis = sample_direction_uniform(rand(@ptnum));\nvector4 orient = quaternion(chf(\"angle\"),axis);\nmatrix3 r = qconvert(orient);\n\nmatrix3 t = primintrinsic(0,'transform',@ptnum);\nt *= chf(\"scale\")*r;\nsetprimintrinsic (0,'transform',@ptnum,t);"
        },
        "scale packeds": {
            "addcode": "matrix3 t = primintrinsic(0,'transform',@ptnum);\nt *= chf(\"scale\");\nsetprimintrinsic (0,'transform',@ptnum,t);"
        },
        "set pivot global": {
            "addcode": "vector old_pivot = primintrinsic(0,'pivot',@ptnum);\nvector pivot = chv(\"pivot\");\n\nsetprimintrinsic (0,'pivot',@ptnum,pivot);\nmatrix3 t = matrix3(primintrinsic(0,'transform',@ptnum));\nv@P += t * (pivot - old_pivot);\n\n"
        },
        "zero pivot": {
            "addcode": "vector old_pivot = primintrinsic(0,'pivot',@ptnum);\nmatrix3 t = matrix3(primintrinsic(0,'transform',@ptnum));\nv@P -= t * old_pivot;\nsetprimintrinsic (0,'pivot',@ptnum,{0,0,0});\n"
        }
    },
    "Particles": {
        "pscale: BirthExplode": {
            "addcode": "float birth = chi('birth_Frame') + rand(@ptnum)*chi('birth_jitter');\nfloat death = birth+chi('life') + rand(@ptnum)*chi('life_jitter');\nf@pscale = 1-2*abs(fit(@Frame,birth,death,0,1)-0.5);"
        },
        "pscale: BirthGrow": {
            "addcode": "float birth = chi('birth_Frame') + rand(@ptnum)*chi('birth_jitter');\nfloat death = birth+chi('life') + rand(@ptnum)*chi('life_jitter');\nf@pscale = fit(@Frame,birth,death,0,1);"
        },
        "pscale: Pow": {
            "addcode": "f@pscale = fit01(pow(rand(@ptnum),chf('pow')),chf('min_pscale'),chf('max_pscale'));"
        },
        "pscale: Ramp": {
            "addcode": "f@pscale = fit01(chramp('pscale_ramp',rand(@ptnum)),chf('min_pscale'),chf('max_pscale'));"
        },
        "spheres: ConvertToSpheres": {
            "addcode": "int prim = addprim(0,'sphere',@ptnum);\nmatrix3 t = ident()*f@pscale;\nsetprimintrinsic (0,'transform',prim,t);"
        },
        "spheres: PscaleToRadius": {
            "addcode": "setprimintrinsic(0,'transform',@ptnum,matrix3(ident()*f@pscale));"
        }
    },
    "RS_Proxies": {
        "Random Proxy Version": {
            "addcode": "string dir,filename;\nsplitpath(s@instancefile,dir,filename);\nint id = floor(rand(@ptnum + chi(\"seed\"))*chi(\"n_versions\")) + 1;\ns@instancefile = s@name = sprintf(dir + '/%04d.rs',id);"
        }
    },
    "Random": {
        "int String Array": {
            "addcode": "// pick random number from an array\nint values[] = {};\nforeach(int i;string s;split(chs('values'),' '))\nvalues[i] = atoi(s);\nint result = values[floor(len(values)*rand(@ptnum))];"
        }
    },
    "Transformations": {
        "Copy t from RSInstances to Packeds": {
            "addcode": "v@P = point(1,\"P\",@ptnum);\nvector pivot = point(1,\"pivot\",@ptnum);\nmatrix3 t = qconvert(point(1,\"orient\",@ptnum));\nfloat pscale =  point(1,\"pscale\",@ptnum);\nvector scale =  point(1,\"scale\",@ptnum);\nt *= pscale;\nscale(t,scale);\n\n\nsetprimintrinsic (0,'pivot',@ptnum,pivot);\nsetprimintrinsic (0,'transform',@primnum,t);"
        },
        "Packed zero Transform": {
            "addcode": "v@P = 0;\nsetprimintrinsic (0,'transform',@primnum,matrix());\n\n\n\n\n"
        },
        "Random Rotate Packed": {
            "addcode": "\nmatrix3 t = primintrinsic(0,'transform',@primnum);\n\nvector dir = sample_direction_uniform(rand(@ptnum));\nmatrix3 rotator = qconvert(quaternion(chf(\"ang\"),dir));\n\nt *= rotator;\nsetprimintrinsic (0,'transform',@primnum,t);\n\n\n\n\n"
        },
        "UpN to Orient": {
            "addcode": "p@orient = quaternion(maketransform(v@N,v@up));  "
        },
        "orient random rotate": {
            "addcode": "vector dir = sample_direction_uniform(rand(@ptnum));\np@orient = qmultiply(quaternion(chf(\"ang\"),dir),p@orient);\n\n\n\n\n"
        },
        "orient to N": {
            "addcode": "v@N = qrotate(p@orient,{0,0,1});\nv@up = qrotate(p@orient,{0,1,0});"
        },
        "orient to N and up": {
            "addcode": "v@N = qrotate(p@orient,{0,0,1});\nv@up = qrotate(p@orient,{0,1,0});"
        }
    },
    "Utility": {
        "Check loaded packeds": {
            "addcode": "float bounds[] = primintrinsic(0,'packedbounds',@primnum);\n\nfloat volume = bounds[1] - bounds[0];\nvolume *= bounds[3] - bounds[2];\nvolume *= bounds[5] - bounds[4];\nif(volume < chf(\"tres\"))\n{\n    //i@group_loaded = 1;\n    removepoint(0,@ptnum);    \n}\n    \n    "
        },
        "Remove Primless Points": {
            "addcode": "if(len(pointprims(0,@ptnum))==0)\n    removepoint(0,@ptnum);"
        },
        "maya strip namespaces": {
            "addcode": "string clean_path = \"\";\nstring pieces[] = split(s@path,\"/\");\nforeach(int i;string s;pieces)\n{\n// strip the last Shape staff\nif( i != len(pieces)-1)\n    {\n        //check if we have namespaces\n        string parts[] = split(s,\":\");\n        int nparts = len(parts);\n        if( nparts > 1)\n            clean_path += parts[nparts - 1] + \"/\";\n        else\n            clean_path += s + \"/\";    \n    }\n}\n\ns@path = clean_path;"
        }
    }
}