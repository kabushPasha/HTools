<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ_Redshift" label="LZ Redshift">
    <memberTool name="LZ RS Setup"/>
    <memberTool name="rs_cam_from_view"/>
    <memberTool name="LZ RS LightDome"/>
    <memberTool name="Rs vol shader"/>
    <memberTool name="Rs Directional Light"/>
    <memberTool name="Rs Light Sun"/>
    <memberTool name="aces"/>
    <memberTool name="Add RS Prefix"/>
    <memberTool name="batchProxy"/>
    <memberTool name="AssetPrepare"/>
    <memberTool name="find_all_textures"/>
    <memberTool name="matte_grid"/>
    <memberTool name="spheres"/>
    <memberTool name="add_reflection_sphere"/>
    <memberTool name="submit_RS_render_Deadline"/>
    <memberTool name="merge_proxies"/>
    <memberTool name="unpack_proxies"/>
    <memberTool name="add_custom_aovs"/>
  </toolshelf>

  <tool name="rs_cam_from_view" label="Rs camera from view" icon="hicon:/SVGIcons.index?OBJ_camera.svg">
    <script scriptType="python"><![CDATA[import objecttoolutils
import lz

# If we contrl click we add parms to the selected cameras
if not kwargs["ctrlclick"]:
    newnode = objecttoolutils.genericCameraLightTool(kwargs, 'cam', 'RS_Cam',False)
    hou.hscript('Redshift_cameraSpareParameters')
    
    newnode.setDisplayFlag(False)
    
    newnode.parm("resx").set(1920)
    newnode.parm("resy").set(1080)
        
    lz.lzRS_Shelf.addCameraParms(newnode,add_comment = True) 
else:
    for node in hou.selectedNodes():
        if node.type().name() == 'cam':
            print( "add_parms" )
            addCameraParms(node) 

    
]]></script>
  </tool>

  <tool name="Rs vol shader" label="Rs vol shader" icon="hicon:/SVGIcons.index?SOP_volume.svg">
    <script scriptType="python"><![CDATA[hou.hscript('Redshift_objectSpareParameters')

for n in hou.selectedNodes():   
    shader = hou.node("/shop").createNode("rs_volume",n.name())    
    n.parm('shop_materialpath').set(shader.path())
]]></script>
  </tool>

  <tool name="Rs Directional Light" label="Rs Directional Light" icon="RS_light_icon">
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
kwargs['ctrlclick'] = True

newnode = objecttoolutils.genericCameraLightTool(kwargs, 'rslight')
newnode.parm('RSL_intensityMultiplier').set(1)
newnode.parm('RSL_volumeScale').set(1)
newnode.parm('light_type').set(0)


newnode.setDisplayFlag(False)
newnode.setName('RS_DirectionalLight',True)]]></script>
  </tool>

  <tool name="Rs Light Sun" label="Rs Light Sun" icon="RS_lightSun_icon">
    <script scriptType="python"><![CDATA[import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
kwargs['ctrlclick'] = True

newnode = objecttoolutils.genericCameraLightTool(kwargs, 'rslightsun')

newnode.parm('RSL_volumeScale').set(1)
newnode.setName('RS_Sun')

newnode.setDisplayFlag(False)]]></script>
  </tool>

  <tool name="LZ RS Setup" label="LZ RS Setup" icon="ROP_Redshift_ROP">
    <script scriptType="python"><![CDATA[import lz
lz.lzRS_Shelf.LZ_RS_Setup3()]]></script>
  </tool>

  <tool name="LZ RS LightDome" label="LZ RS LightDome" icon="RS_lightDome_icon">
    <script scriptType="python"><![CDATA[import hou,os
obj = hou.node("/obj")
newnode = obj.createNode("rslightdome")
newnode.moveToGoodPosition()

newnode.parm('RSL_volumeScale').set(1)
newnode.setDisplayFlag(False)

default_hdr = "$HMEGA/Assets/HDRI/panorama_map.hdr"
if not os.path.isfile(hou.text.expandString(default_hdr)):
    default_hdr = "X:/Assets/HDRI/panorama_map.hdr"

newnode.parm('env_map').set(default_hdr)
newnode.parm('ogl_enablelight').set(0)
#newnode.parm('background_enable').set(0)

# Environment alpha replace
newnode.parm('alphaReplaceEnable').set(1)
# Set Name
newnode.setName('RS_DomeLight',True)





# Add LZ Controlls
ptg = newnode.parmTemplateGroup()
# HDR IMAGE
hdr_img = hou.StringParmTemplate("hdr_img",
                            "HDR_img",
                            1,
                            default_value=([]),
                            string_type=hou.stringParmType.FileReference,
                            item_generator_script="""
import os.path
menuItems = []
n = kwargs[\'node\']
folder = n.parm(\'hdr_dir\').eval()
folder = os.path.abspath(folder)

from glob import glob
items =  glob(folder + \"/*\")

for i in items:
    path = i.split(\'\\\\\')
    tex = path.pop()
    if not tex.endswith('.rstexbin'):    
        menuItems += {i}
        menuItems += {tex}        
return menuItems""",
                            item_generator_script_language=hou.scriptLanguage.Python,
                            menu_type=hou.menuType.Normal)                            
hdr_img.setTags({"script_action": "kwargs['node'].parm(\'env_map\').set(kwargs['node'].parm(\'hdr_img\'))"})
ptg.addParmTemplate(hdr_img)
# HDR Folder
default_folder = "S:/CloudStation/Assets/HDRI/Heaven/"
if not os.path.isdir(default_folder):
    default_folder = "X:/Assets/HDRI/Heaven/"
if not os.path.isdir(default_folder):
    default_folder = "S:/Temp/HDRI/Heaven/"    
    
hdr_dir = hou.StringParmTemplate("hdr_dir",
                                "HDR_dir",
                                1,
                                default_value=([default_folder]),
                                string_type=hou.stringParmType.FileReference,
                                item_generator_script_language=hou.scriptLanguage.Python,
                                menu_type=hou.menuType.StringReplace)
hdr_dir.setFileType(hou.fileType.Directory)
ptg.addParmTemplate(hdr_dir)
# Next Button
next_btn = hou.ButtonParmTemplate("next", "Next")
next_btn.setScriptCallback("n = hou.pwd();p = n.parm(\"hdr_img\");mi = p.menuItems();p.set(mi[mi.index(p.eval())+1])")
next_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
ptg.addParmTemplate(next_btn)
# Prev Button
prev_btn = hou.ButtonParmTemplate("prev", "Prev")
prev_btn.setScriptCallback("n = hou.pwd();p = n.parm(\"hdr_img\");mi = p.menuItems();p.set(mi[mi.index(p.eval())-1])")
prev_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
ptg.addParmTemplate(prev_btn)
# Rotate Button
rotate_btn = hou.ButtonParmTemplate("rotate", "Rotate")
rotate_btn.setScriptCallback("hou.pwd().parm(\'ry\').setExpression(\'360*$F/$FEND\')")
rotate_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
rotate_btn.setTags({"script_callback": "hou.pwd().parm(\'ry\').setExpression(\'360*$F/$FEND\')", "script_callback_language": "python"})
ptg.addParmTemplate(rotate_btn)
# Freeze Rotete button
freeze_btn = hou.ButtonParmTemplate("freeze", "Freeze")
freeze_btn.setScriptCallback("hou.pwd().parm(\'ry\').deleteAllKeyframes()")
freeze_btn.setScriptCallbackLanguage(hou.scriptLanguage.Python)
freeze_btn.setTags({"script_callback": "hou.pwd().parm(\'ry\').deleteAllKeyframes()", "script_callback_language": "python"})
ptg.addParmTemplate(freeze_btn)

newnode.setParmTemplateGroup(ptg)

if len(newnode.parm("hdr_img").menuItems()) > 0:
    newnode.parm("hdr_img").set(newnode.parm("hdr_img").menuItems()[0])

# Set Backplate
newnode.parm("tex1").set("S:/HTools/HEXT/Assets/red.tif")
newnode.parm("RSL_exposure2").set(1.5)
newnode.parm("RSL_hue2").set(230)
newnode.parm("RSL_saturation2").set(20)






]]></script>
  </tool>

  <tool name="Rs displacement" label="Rs displacement" icon="SOP_mountain">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    n.parm("RS_objprop_rstess_enable").set(1)
    n.parm("RS_objprop_displace_enable").set(1)
    mat = hou.node(n.parm('shop_materialpath').eval())
    """
    if mat.type().name() == 'redshift_vopnet':
        disp = mat.createNode('Displacement')
        disp.setDetailHighFlag(True)
        out = mat.node('redshift_material1')        
        out.setInput(1,disp)
        
        disp.setPosition(out.position() + hou.Vector2(-2,2.5))
    """]]></script>
  </tool>

  <tool name="Add RS Prefix" label="Add RS Prefix" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    if not n.name().startswith("RS_"):        
        n.setName("RS_" + n.name(),1)
    else:
        n.setName(n.name()[3:])]]></script>
  </tool>

  <tool name="aces" label="ACES" icon="PLASMA_App">
    <helpText><![CDATA[""" Press Ctrl+U to swap lut and fix gamma
Works only in renderViewWindow"""]]></helpText>
    <script scriptType="python"><![CDATA[if hou.getenv("g")=="1":
    hou.hscript('colorsettings -g 2.2 -c')
    hou.putenv("g","2.2")
else:
    hou.hscript('colorsettings -g 1 -c')
    hou.putenv("g","1")
    
mega = hou.text.expandString('$HEXT').replace('\\','/')
hou.hscript('colorsettings -l "'+ mega +'/Assets/LUTS/Rec.709_for_ACEScg_Houdini.lut" -c')]]></script>
  </tool>

  <tool name="batchProxy" label="Batch Proxy" icon="hicon:/SVGIcons.index?SOP_filecache.svg">
    <script scriptType="python"><![CDATA[import subprocess
import hou
import lz

hou.hipFile.save()
for n in hou.selectedNodes():
    lz.lzRS_Shelf.BatchProxy(n)
]]></script>
  </tool>

  <tool name="AssetPrepare" label="AssetPrepare" icon="hicon:/SVGIcons.index?MISC_conductor.svg">
    <helpText><![CDATA["""Select File node of a loaded asset"""]]></helpText>
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    t = n.createOutputNode('xform',"Maya_Scale")
    t.parm('scale').set(0.01)
    
    t = t.createOutputNode('xform',"Centered")
    t.parm("tx").setExpression("-$CEX")
    t.parm("ty").setExpression("-$CEY")
    t.parm("tz").setExpression("-$CEZ")
    
    t = t.createOutputNode('xform',"Grounded")
    t.parm("ty").setExpression(r'-bbox(opinputpath(".",0),D_YMIN)')
    
    t = t.createOutputNode('xform',"Scale")    
    t = t.createOutputNode("Rs_quickMat","Material")
    
    t.setDisplayFlag(1)    
    t.setRenderFlag(1)
    
    # Add Rs Prefix to parent
    p = n.parent()
    if not p.name().startswith("RS_"):        
        p.setName("RS_" + p.name(),1)
        
    t = t.createOutputNode("Redshift_Proxy_Output","ExportProxy")
    t.parm("RS_archive_file").set("$HIP/1.rs")
    hou.setFrame(1)
    
    # Create Tommy
    tommy = t.parent().createNode("testgeometry_tommy","ScaleTest")
    tommy.setTemplateFlag(1)
    tommy.parm("tx").set(1)
    tommy.setPosition(n.position() + hou.Vector2(3,0))
    
    
    ]]></script>
  </tool>

  <tool name="find_all_textures" label="Find All Textures" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
type = 'redshift::TextureSampler'

node_type = hou.nodeType(hou.vopNodeTypeCategory(),type)
tex_nodes = node_type.instances()

convert = 0
size_total = 0

for tex_node in tex_nodes:
    #print tex_node.name() 
    tex_path =  tex_node.parm("tex0").eval()
    if os.path.isfile(tex_path):
        tex_node.bypass(1)
        
        size = os.path.getsize(tex_path)*1e-6
        if size > 1000:            
            print (tex_node.path())
            print (tex_path)
            print (size)
            tex_node.setColor(hou.Color(1,0,0))
       
        if size < 1000:
            tex_node.bypass(0)
            print (tex_node.path())
            print (tex_path)
            print (size)
            size_total += size
            
        if convert:    
            tp = r"C:\ProgramData\Redshift\bin\redshiftTextureProcessor.exe"            
            tex_name = os.path.abspath(tex_path)            
            os.system(r"start " + tp + " \"" + tex_name + "\" -l")
            
print ("TOTAL SIZE")
print (size_total)
        
        
            
            
            ]]></script>
  </tool>

  <tool name="matte_grid" label="Matte Grid" icon="hicon:/SVGIcons.index?COP2_atop.svg">
    <script scriptType="python"><![CDATA[obj = hou.node("obj")

matte = obj.createNode("geo","RS_Matte_grid")
grid = matte.createNode("grid")
mat = grid.createOutputNode("Rs_quickMat")
material = mat.node("mat").node("mat").node("Material1")
material.parm("refl_weight").set(1)

mat.setDisplayFlag(1)
mat.setRenderFlag(1)

matte.parm("RS_objprop_matte_enable").set(1)
matte.parm("RS_objprop_matte_alpha").set(0)
matte.parm("RS_objprop_matte_reflscale").set(1)
matte.parm("RS_objprop_matte_refrscale").set(1)
matte.parm("RS_objprop_matte_diffscale").set(1)
matte.parm("RS_objprop_matte_shadowenable").set(1)
matte.parm("RS_objprop_matte_shadowsFromM").set(0)

]]></script>
  </tool>

  <tool name="spheres" label="Spheres" icon="hicon:/SVGIcons.index?TOOLS_select_remove.svg">
    <script scriptType="python"><![CDATA[obj = hou.node("obj")

holder = obj.createNode("geo","RS_Spheres")
holder.parm("ty").set(0.6)
holder.parm("scale").set(0.5)
merge = holder.createNode("merge")

# Diffuse
sphere = holder.createNode("sphere")
sphere.parm("type").set(1)
sphere.parm("freq").set(8)

mat = sphere.createOutputNode("Rs_quickMat")
material = mat.node("mat").node("mat").node("Material1")
material.parmTuple("diffuse_color").set(hou.Vector3(1,1,1))
merge.setNextInput(mat)

# reflect
sphere = holder.createNode("sphere")
sphere.parm("type").set(1)
sphere.parm("freq").set(8)
sphere.parm("tx").set(2.5)

mat = sphere.createOutputNode("Rs_quickMat")
material = mat.node("mat").node("mat").node("Material1")
material.parm("refl_weight").set(1)
material.parm("diffuse_weight").set(0)
material.parm("refl_fresnel_mode").set("2")
material.parm("refl_metalness").set(1)
merge.setNextInput(mat)
# refract
sphere = holder.createNode("sphere")
sphere.parm("type").set(1)
sphere.parm("freq").set(8)
sphere.parm("tx").set(-2.5)

mat = sphere.createOutputNode("Rs_quickMat")
material = mat.node("mat").node("mat").node("Material1")
material.parm("refl_weight").set(1)
material.parm("refr_weight").set(1)
merge.setNextInput(mat)

holder.layoutChildren()
holder.moveToGoodPosition()


#mat.setDisplayFlag(1)
#mat.setRenderFlag(1)]]></script>
  </tool>

  <tool name="add_reflection_sphere" label="Reflection Sphere" icon="hicon:/SVGIcons.index?SCENEGRAPH_domelight.svg">
    <script scriptType="python"><![CDATA[hdri = hou.selectedNodes()[0]
if hdri.type().name() == 'rslightdome::2.0':
    print ("hi")
    refl_sphere = hdri.createOutputNode("geo","RS_ReflectionSphere")
    refl_sphere.parm("ry").set(270.6)
    refl_sphere.parm("scale").set(100000)
    
    refl_sphere.parm("viewportlod").set(4)
    refl_sphere.parm("MESHFLAG_PRIMARYRAYVISIBLE").set(0)
    refl_sphere.parm("MESHFLAG_SHADOWCASTER").set(0)
    refl_sphere.parm("MESHFLAG_SHADOWRECEIVER").set(0)
    refl_sphere.parm("MESHFLAG_NOSELFSHADOW").set(0)
    refl_sphere.parm("MESHFLAG_AOCASTER").set(0)
    refl_sphere.parm("MESHFLAG_REFLECTIONVISIBLE").set(0)
    refl_sphere.parm("MESHFLAG_REFLECTIONCASTER").set(0)
    refl_sphere.parm("MESHFLAG_REFRACTIONCASTER").set(0)
    refl_sphere.parm("MESHFLAG_FGVISIBLE").set(0)
    refl_sphere.parm("MESHFLAG_GIVISIBLE").set(0)
    refl_sphere.parm("MESHFLAG_CAUSTICVISIBLE").set(0)
    refl_sphere.parm("MESHFLAG_FGCASTER").set(0)
    refl_sphere.parm("MESHFLAG_GICASTER").set(0)
    
    #create sphere1 node    
    sphere1 = refl_sphere.createNode("sphere","sphere1")
    sphere1.parm("type").set(2)
    sphere1.parm("rows").set(55)
    sphere1.parm("cols").set(105)
    
    #create uvtexture1 node
    uvtexture1 = sphere1.createOutputNode("texture","uvtexture1")
    uvtexture1.setPosition(sphere1.position() + hou.Vector2(4.85722573274e-17,-0.734234228274))
    uvtexture1.parm("type").set(1)
    uvtexture1.parm("su").set(-1.0)
    uvtexture1.parm("fixseams").set(1)
    
    #create Rs_quickMat1 node
    Rs_quickMat1 = uvtexture1.createOutputNode("Rs_quickMat::004","Rs_quickMat1")
    Rs_quickMat1.setPosition(uvtexture1.position() + hou.Vector2(2.82882882883,-0.90990990991))
    Rs_quickMat1.parm("material").set('/obj/RS_sphere1/Rs_quickMat1')
    
    material = Rs_quickMat1.node("mat").node("mat")
    tex = material.createNode('redshift::TextureSampler')
    tex.parm("tex0").set(hdri.parm("env_map"))
    
    material.node("redshift_material1").setInput(0,tex)
    
    Rs_quickMat1.setRenderFlag(1)
    
    
    
    
    ]]></script>
  </tool>

  <tool name="submit_RS_render_Deadline" label="RS Render Deadline" icon="hicon:/SVGIcons.index?TOP_deadlinescheduler.svg">
    <script scriptType="python"><![CDATA[import lz
for n in hou.selectedNodes():
    if n.type().name() == 'Redshift_ROP':
        lz.lzDeadline.submitRS2Deadline(n)]]></script>
  </tool>

  <tool name="merge_proxies" label="Merge Proxies" icon="hicon:/SVGIcons.index?MISC_satchel.svg">
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

obj = hou.node("/obj")
holder = obj.createNode("geo","RS_Merged")
holder.moveToGoodPosition()
holder.parm("RS_objprop_inst_ignorePivot").set(0)

merge = holder.createNode("object_merge")
merge.parm("numobj").set(len(sel_nodes))
merge.parm("xformtype").set(1)


for i,n in enumerate(sel_nodes):
    dn = n.displayNode()    
    merge.parm("objpath" + str(i+1)).set(dn.path())
    
reverse = merge.createOutputNode("LZ_RS_InstanceProxies")
reverse.parm("reverse").set(1)
stash = reverse.createOutputNode("stash")
stash.parm("stashinput").pressButton()
preview = stash.createOutputNode("LZ_RS_InstanceProxies")

preview.setDisplayFlag(1)
stash.setRenderFlag(1)

for n in sel_nodes:
    n.destroy()

merge.destroy()
reverse.destroy()

center = preview.geometry().boundingBox().center()
holder.parmTuple('p').set(center)






    ]]></script>
  </tool>

  <tool name="unpack_proxies" label="Unpack Proxies" icon="hicon:/SVGIcons.index?MISC_raygun.svg">
    <script scriptType="python"><![CDATA[import lzutil
reload(lzutil)
obj = hou.node("/obj")

for n in hou.selectedNodes():
    nwt = n.worldTransform()
    for prim in n.displayNode().geometry().prims():
        pt = prim.points()[0]
        proxy_path = pt.attribValue("inst_source")
        fullt_t = prim.fullTransform()
        
        asset = lzutil.loadRsAssetSimple(proxy_path)
        asset.setWorldTransform(fullt_t * nwt)
        


]]></script>
  </tool>

  <tool name="add_custom_aovs" label="Add Custom AOV's" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[rs = hou.node("/out/Redshift_ROP1")

def add_custom_AOV(rs,shader):
    n_aovs = rs.parm('RS_aov').eval()
    rs.parm('RS_aov').set(n_aovs + 1)
    
    rs.parm("RS_aovID_" + str(n_aovs + 1)).set("CUSTOM")
    rs.parm("RS_aovSuffix_" + str(n_aovs + 1)).set(shader.name())
    rs.parm("RS_aovCustomShader_" + str(n_aovs + 1)).set(rs.relativePathTo(shader))

for n in hou.selectedNodes():
    if n.type().name() == "redshift_vopnet":
        add_custom_AOV(rs,n)]]></script>
  </tool>
</shelfDocument>
