<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="LZ Main" label="LZ Main">
    <memberTool name="Update JOB"/>
    <memberTool name="OpenJOB"/>
    <memberTool name="LZ QuickVex PyPanel"/>
    <memberTool name="Edit LZ Util"/>
    <memberTool name="Gallerer"/>
    <memberTool name="Particle Display Type"/>
    <memberTool name="Reload Textures"/>
    <memberTool name="LZ N2S"/>
    <memberTool name="lz_box"/>
    <memberTool name="box_new"/>
    <memberTool name="makeVerb"/>
    <memberTool name="create_ref"/>
    <memberTool name="quick_gal"/>
    <memberTool name="load expresions"/>
    <memberTool name="Perfomance Monitor"/>
    <memberTool name="AssetBrowser"/>
    <memberTool name="Load_NetBox"/>
    <memberTool name="New Flooating Panel"/>
    <memberTool name="NodeParms"/>
    <memberTool name="wrangle"/>
    <memberTool name="change_asset_version"/>
    <memberTool name="volume data"/>
    <memberTool name="pyhon"/>
    <memberTool name="nulls2Points"/>
    <memberTool name="Render View"/>
    <memberTool name="fileCache finder"/>
    <memberTool name="Export_Nodes"/>
  </toolshelf>

  <tool name="Render View" label="Render View" icon="hicon:/SVGIcons.index?ROP_mantra.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
#pos goes from bottom to top, from left to rigth
dy = [0.05,0.65];
dx = [0.025,0.55];


#pos = (sz[0]*2 - 950 + int(sz[0]*dx[0]),int(sz[1]*(1 - dy[1] - dy[0])))
pos = (sz[0] + int(sz[0]*dx[0]),int(sz[1]*(1 - dy[1] - dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))


#panel = d.createFloatingPanel(hou.paneTabType.SceneViewer,pos,size)
#panes = panel.panes()
#tab = panes[0].createTab(hou.paneTabType.IPRViewer)
panel = d.createFloatingPanel(hou.paneTabType.IPRViewer,pos,size)

panel.setName('RenderView')

'''
renderTab = panel.paneTabs()[0]
vexfunc = panel.panes()[0].createTab(hou.paneTabType.PythonPanel)
vexfunc.setActiveInterface(hou.pypanel.interfaceByName("RedshiftRenderViewPane"))
renderTab.setIsCurrentTab()
''']]></script>
  </tool>

  <tool name="New Flooating Panel" label="New Floating Panel" icon="hicon:/SVGIcons.index?BUTTONS_chooser.svg">
    <script scriptType="python"><![CDATA[def openInNewTab(node):
    # get screen size
    import ctypes
    user32 = ctypes.windll.user32
    sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
    # SET size
    dy = [0.05,0.65];
    dx = [0.025,0.6];    
    
    pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
    size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))    
    
    #create panel
    panel = d.createFloatingPanel(hou.paneTabType.NetworkEditor,pos,size)
    #split
    pns = panel.panes()
    pns[0].splitHorizontally()
    if node.type().name()=='chopnet':
        panel.panes()[1].splitHorizontally()
        
        #same but incremented panel
        #set link groups
        pts = panel.paneTabs() 
        pts[0].setLinkGroup(hou.paneLinkType.Group1)
        pts[1].setLinkGroup(hou.paneLinkType.Group1)
        pts[2].setLinkGroup(hou.paneLinkType.Group1)
        #set node type
        pts[1].cd(node.path())
        pts[2].setType(hou.paneTabType.Parm)
        
        #make motion fx
        pts[0].setType(hou.paneTabType.ChannelViewer)
        #frame selection 
        pts = panel.paneTabs()        
        #pts[0].frameSelection()  
        pts[1].frameSelection()
        #pts[2].frameSelection()
    else :
        #set link groups
        pts = panel.paneTabs()        
        pts[0].setLinkGroup(hou.paneLinkType.Group1)
        pts[1].setLinkGroup(hou.paneLinkType.Group1)
        #set node type
        pts[0].cd(node.path())
        pts[1].setType(hou.paneTabType.Parm)
        #frame selection
        pts = panel.paneTabs()        
        pts[0].frameSelection()  

## MAIN
#print kwargs 

d = hou.ui.curDesktop()
if hou.selectedNodes() is not ():
    for node in hou.selectedNodes():
        openInNewTab(node)
else:
    net_editor =  hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    node = net_editor.pwd()
    openInNewTab(node)
    net_editor.cd("..")

    
    
]]></script>
  </tool>

  <tool name="LZ Grains Setup" label="LZ Grains Setup" icon="hicon:/SVGIcons.index?SHELF_dry_sand.svg">
    <toolMenuContext name="network">
      <contextOpType>Sop/grainsource</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('dopnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_box1_grainsource1 (Sop/grainsource)
set _obj_box1_grainsource1 = `run("opadd -e -n -v grainsource grainsource1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_box1_grainsource1
opparm -V 3 $_obj_box1_grainsource1 particlesep ( 0.050000000000000003 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_grainsource1
opexprlanguage -s hscript $_obj_box1_grainsource1
opuserdata -n '___Version___' -v '3' $_obj_box1_grainsource1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_grainsource1
opuserdata -n '___toolid___' -v 'dynamics_popgrains' $_obj_box1_grainsource1
opset -p on $_obj_box1_grainsource1
opcf $arg1

# Node $_obj_box1_popnet (Sop/dopnet)
set _obj_box1_popnet = `run("opadd -e -n -v dopnet popnet")`
oplocate -x `$arg2 + 1.9854592095521583e-17` -y `$arg3 + -3.1543624399492391` $_obj_box1_popnet
opspareds '    parm {   name    "isplayer"      baseparm        label   "Dopnet is Player"      joinnext        export  none     }     parm {   name    "playfilesname"         baseparm        label   "Playback Simulation"   export  none     }     group {  name    "stdswitcher4"  label   "Object Merge"          multiparm {         name        "numobj"            label       "Number of Objects"         baseparm        default     1           parm {              name    "enable#"               baseparm                label   "Enable"                export  none        }       parm {              name    "objname#"              baseparm                label   "Object"                export  none        }       parm {              name    "dataname#"             baseparm                label   "Data"          export  none        }   }      }      group {   name    "stdswitcher4_1"        label   "Simulation"    parm {      name        "resimulate"        baseparm        label       "Reset Simulation"          export      none    }       parm {      name        "initialstate"      baseparm        label       "Initial State"             export      none    }       parm {      name        "timestep"          baseparm        label       "Time Step"         export      none    }       parm {      name        "substep"           baseparm        label       "Sub Steps"         export      none    }       parm {      name        "timeoffset"        baseparm        label       "Offset Time"       export      none    }       parm {      name        "startframe"        baseparm        label       "Start Frame"       export      none    }       parm {      name        "timescale"         baseparm        label       "Scale Time"        export      none    }       parm {      name        "maxfeedback"       baseparm        label       "Max Feedback Loops"        export      none    }       parm {      name        "autoresim"         baseparm        label       "Enable Automatic Resimulation"             export      none    }       parm {      name        "datahints"         baseparm        label       "Provide Data Hints"        export      none    }       parm {      name        "interpolate"       baseparm        label       "Interpolate Display Data"          export      none    }     }      group {    name    "stdswitcher4_2"        label   "Cache"         parm {      name        "cacheenabled"      baseparm        label       "Cache Simulation"          export      none    }       parm {      name        "compresssims"      baseparm        label       "Compress .sim Files"       export      none    }       parm {      name        "cachetodisk"       baseparm        label       "Allow Caching To Disk"             export      none    }       parm {      name        "cachetodisknoninteractive"         baseparm        label       "Cache to Disk in Non-Interactive Sessions"         export      none    }       parm {      name        "cachesubsteps"             baseparm        label       "Cache Substep Data"        export      none    }       parm {      name        "cachemaxsize"      baseparm        label       "Cache Memory (MB)"         export      none    }       parm {      name        "timeless"          baseparm        label       "Timeless (No History)"             export      none    }       parm {      name        "explicitcache"             baseparm        label       "Save Checkpoints"          export      none    }       parm {      name        "explicitcachename"         baseparm        label       "Checkpoint File"           export      none    }       parm {      name        "explicitcachensteps"       baseparm        label       "Checkpoint Trail Length"           export      none    }       parm {      name        "explicitcachecheckpointspacing"            baseparm        label       "Checkpoint Interval"       export      none    }     }      parm {     name    "particle_separation"   label   "Particle Separation"   type    float   default { "0" }         range   { 0! 10 }     } ' $_obj_box1_popnet
opparm $_obj_box1_popnet  numobj ( 1 )
chblockbegin
chadd -t 0 0 $_obj_box1_popnet timestep
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("timescale")/(ch("substep")*$FPS)' $_obj_box1_popnet/timestep
chadd -t 0 0 $_obj_box1_popnet timeoffset
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '(ch("startframe")-1)/$FPS' $_obj_box1_popnet/timeoffset
chadd -t 0 0 $_obj_box1_popnet particle_separation
chkey -t 0 -v 0.10000000000000001 -m 0 -a 0 -A 0 -T a  -F 'ch("../grainsource1/particlesep")' $_obj_box1_popnet/particle_separation
chblockend
opparm -V 16.0.557 $_obj_box1_popnet objname1 ( p* ) particle_separation ( particle_separation )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet
opexprlanguage -s hscript $_obj_box1_popnet
opcf $_obj_box1_popnet

# Node $_obj_box1_popnet_popsolver (Dop/popsolver::2.0)
set _obj_box1_popnet_popsolver = `run("opadd -e -n -v popsolver::2.0 popsolver")`
oplocate -x `$arg2 + 0` -y `$arg3 + 1.1294999999999997` $_obj_box1_popnet_popsolver
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_popsolver substeps
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("minimumsubsteps")' $_obj_box1_popnet_popsolver/substeps
chblockend
opparm $_obj_box1_popnet_popsolver minimumsubsteps ( 10 ) substeps ( substeps )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popsolver
opexprlanguage -s hscript $_obj_box1_popnet_popsolver
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popsolver
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_popsolver
opuserdata -n '___toolid___' -v 'dynamics_poplocation' $_obj_box1_popnet_popsolver

# Node $_obj_box1_popnet_source_first_input (Dop/popsource::2.0)
set _obj_box1_popnet_source_first_input = `run("opadd -e -n -v popsource::2.0 source_first_input")`
oplocate -x `$arg2 + 1.1307500120162963` -y `$arg3 + 6.3452825593120297` $_obj_box1_popnet_source_first_input
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_source_first_input impulseactiveate
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$F==1' $_obj_box1_popnet_source_first_input/impulseactiveate
chblockend
opparm $_obj_box1_popnet_source_first_input folder0 ( 1 1 1 1 1 ) emittype ( allgeo ) usecontextgeo ( first ) impulseactiveate ( impulseactiveate )
opset -d off -r off -h off -f off -y off -t on -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_source_first_input
opexprlanguage -s hscript $_obj_box1_popnet_source_first_input
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_source_first_input
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_source_first_input
opuserdata -n '___toolid___' -v 'dynamics_popsource' $_obj_box1_popnet_source_first_input

# Node $_obj_box1_popnet_popsprite1 (Dop/popsprite)
set _obj_box1_popnet_popsprite1 = `run("opadd -e -n -v popsprite popsprite1")`
oplocate -x `$arg2 + 1.1307500120162963` -y `$arg3 + 5.3677966426084902` $_obj_box1_popnet_popsprite1
opparm $_obj_box1_popnet_popsprite1  alpharamp ( 2 )
opparm $_obj_box1_popnet_popsprite1 spritemap ( '$HFS/houdini/pic/sphere_matte.pic' ) alpharamp2pos ( 1 ) alpharamp2value ( 1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popsprite1
opexprlanguage -s hscript $_obj_box1_popnet_popsprite1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popsprite1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popsprite1
opuserdata -n '___toolid___' -v 'dynamics_popsprite' $_obj_box1_popnet_popsprite1

# Node $_obj_box1_popnet_popcolor1 (Dop/popcolor)
set _obj_box1_popnet_popcolor1 = `run("opadd -e -n -v popcolor popcolor1")`
oplocate -x `$arg2 + 1.1331191427234746` -y `$arg3 + 4.3677966306875611` $_obj_box1_popnet_popcolor1
opparm $_obj_box1_popnet_popcolor1  ramp ( 3 ) blendramp ( 2 ) alpharamp ( 2 )
opparm $_obj_box1_popnet_popcolor1 colortype ( ramp ) ramp ( 3 ) localramp ( 'ramp = rand(@id);' ) ramp1c ( 0.44900000095367432 0.20417217910289764 0.14547599852085114 ) ramp2pos ( 0.23719675838947296 ) ramp2c ( 0.89999997615814209 0.49850195646286011 0.23939996957778931 ) blendramp2pos ( 1 ) blendramp2value ( 1 ) alpharamp2pos ( 1 ) alpharamp2value ( 1 ) ramp3pos ( 0.98382747173309326 ) ramp3c ( 0.89999997615814209 0.65166199207305908 0.49140000343322754 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popcolor1
opexprlanguage -s hscript $_obj_box1_popnet_popcolor1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popcolor1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popcolor1
opuserdata -n '___toolid___' -v 'dynamics_popcolor' $_obj_box1_popnet_popcolor1

# Node $_obj_box1_popnet_groundplane1 (Dop/groundplane)
set _obj_box1_popnet_groundplane1 = `run("opadd -e -n -v groundplane groundplane1")`
oplocate -x `$arg2 + -1.5` -y `$arg3 + 0.37949999999999973` $_obj_box1_popnet_groundplane1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_groundplane1
opexprlanguage -s hscript $_obj_box1_popnet_groundplane1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_groundplane1
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_groundplane1
opuserdata -n '___toolid___' -v 'dop_groundplane' $_obj_box1_popnet_groundplane1

# Node $_obj_box1_popnet_staticobject1 (Dop/staticobject)
set _obj_box1_popnet_staticobject1 = `run("opadd -e -n -v staticobject staticobject1")`
oplocate -x `$arg2 + -3` -y `$arg3 + 0.37949999999999973` $_obj_box1_popnet_staticobject1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_staticobject1 createframe
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(opcreator(".")+"/startframe")' $_obj_box1_popnet_staticobject1/createframe
chadd -t 0 0 $_obj_box1_popnet_staticobject1 bullet_shrink_amount
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("bullet_collision_margin")' $_obj_box1_popnet_staticobject1/bullet_shrink_amount
chblockend
opparm -V 4 $_obj_box1_popnet_staticobject1 soppath ( '`opinputpath("..",3)`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_staticobject1
opexprlanguage -s hscript $_obj_box1_popnet_staticobject1
opuserdata -n '___Version___' -v '4' $_obj_box1_popnet_staticobject1
opuserdata -n '___toolcount___' -v '16' $_obj_box1_popnet_staticobject1
opuserdata -n '___toolid___' -v 'dop_staticobject' $_obj_box1_popnet_staticobject1

# Node $_obj_box1_popnet_popgrains1 (Dop/popgrains)
set _obj_box1_popnet_popgrains1 = `run("opadd -e -n -v popgrains popgrains1")`
oplocate -x `$arg2 + 1.1296691476527789` -y `$arg3 + 3.3409509811827398` $_obj_box1_popnet_popgrains1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_popgrains1 particlesep
chkey -t 0 -v 0.10000000000000001 -m 0 -a 0 -A 0 -T a  -F 'ch("../particle_separation")' $_obj_box1_popnet_popgrains1/particlesep
chblockend
opparm $_obj_box1_popnet_popgrains1 particlesep ( particlesep ) folder0 ( 1 1 1 ) opencl ( on )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popgrains1
opexprlanguage -s hscript $_obj_box1_popnet_popgrains1
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popgrains1
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popgrains1
opuserdata -n '___toolid___' -v 'dynamics_popgrains' $_obj_box1_popnet_popgrains1
opcf ..
opcf $_obj_box1_popnet

# Node $_obj_box1_popnet_output (Dop/output)
set _obj_box1_popnet_output = `run("opadd -e -n -v output output")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.8705000000000003` $_obj_box1_popnet_output
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_output f1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FSTART' $_obj_box1_popnet_output/f1
chadd -t 0 0 $_obj_box1_popnet_output f2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FEND' $_obj_box1_popnet_output/f2
chblockend
opparm $_obj_box1_popnet_output
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_output
opexprlanguage -s hscript $_obj_box1_popnet_output
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_output

# Node $_obj_box1_popnet_popobject (Dop/popobject)
set _obj_box1_popnet_popobject = `run("opadd -e -n -v popobject popobject")`
oplocate -x `$arg2 + -1.1295999999999999` -y `$arg3 + 2.5602000269293788` $_obj_box1_popnet_popobject
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_popobject createframe
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(opcreator(".")+"/startframe")' $_obj_box1_popnet_popobject/createframe
chblockend
opparm $_obj_box1_popnet_popobject
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_popobject
opexprlanguage -s hscript $_obj_box1_popnet_popobject
opuserdata -n '___Version___' -v '' $_obj_box1_popnet_popobject
opuserdata -n '___toolcount___' -v '2' $_obj_box1_popnet_popobject
opuserdata -n '___toolid___' -v 'dynamics_poplocation' $_obj_box1_popnet_popobject

# Node $_obj_box1_popnet_wire_pops_into_here (Dop/merge)
set _obj_box1_popnet_wire_pops_into_here = `run("opadd -e -n -v merge wire_pops_into_here")`
oplocate -x `$arg2 + 1.1295999999999999` -y `$arg3 + 2.1084000089764596` $_obj_box1_popnet_wire_pops_into_here
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_wire_pops_into_here activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_box1_popnet_wire_pops_into_here/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_wire_pops_into_here
opexprlanguage -s hscript $_obj_box1_popnet_wire_pops_into_here

# Node $_obj_box1_popnet_gravity1 (Dop/gravity)
set _obj_box1_popnet_gravity1 = `run("opadd -e -n -v gravity gravity1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.1205000000000003` $_obj_box1_popnet_gravity1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_gravity1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_box1_popnet_gravity1/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_gravity1
opexprlanguage -s hscript $_obj_box1_popnet_gravity1
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_gravity1
opuserdata -n '___toolid___' -v 'LZ_Gravity_Groundplane' $_obj_box1_popnet_gravity1

# Node $_obj_box1_popnet_merge1 (Dop/merge)
set _obj_box1_popnet_merge1 = `run("opadd -e -n -v merge merge1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -0.37050000000000027` $_obj_box1_popnet_merge1
chblockbegin
chadd -t 0 0 $_obj_box1_popnet_merge1 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_box1_popnet_merge1/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_box1_popnet_merge1
opexprlanguage -s hscript $_obj_box1_popnet_merge1
opuserdata -n '___toolcount___' -v '1' $_obj_box1_popnet_merge1
opuserdata -n '___toolid___' -v 'LZ_Gravity_Groundplane' $_obj_box1_popnet_merge1
oporder -e output popsolver popobject wire_pops_into_here source_first_input popsprite1 popcolor1 gravity1 merge1 groundplane1 staticobject1 popgrains1 
opcf ..
opset -p on $_obj_box1_popnet

opcf $arg1
opwire -n $_obj_box1_transform1 -0 $_obj_box1_grainsource1
opcf $arg1
opwire -n $_obj_box1_grainsource1 -0 $_obj_box1_popnet
opwire -n $_obj_box1_transform2 -3 $_obj_box1_popnet
opcf $_obj_box1_popnet
opwire -n $_obj_box1_popnet_gravity1 -0 $_obj_box1_popnet_output
opwire -n $_obj_box1_popnet_popobject -0 $_obj_box1_popnet_popsolver
opwire -n $_obj_box1_popnet_wire_pops_into_here -2 $_obj_box1_popnet_popsolver
opwire -n $_obj_box1_popnet_popgrains1 -0 $_obj_box1_popnet_wire_pops_into_here
opwire -n $_obj_box1_popnet_source_first_input -0 $_obj_box1_popnet_popsprite1
opwire -n $_obj_box1_popnet_popsprite1 -0 $_obj_box1_popnet_popcolor1
opwire -n $_obj_box1_popnet_merge1 -0 $_obj_box1_popnet_gravity1
opwire -n $_obj_box1_popnet_staticobject1 -0 $_obj_box1_popnet_merge1
opwire -n $_obj_box1_popnet_groundplane1 -1 $_obj_box1_popnet_merge1
opwire -n $_obj_box1_popnet_popsolver -2 $_obj_box1_popnet_merge1
opwire -n $_obj_box1_popnet_popcolor1 -0 $_obj_box1_popnet_popgrains1
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_box1_popnet
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_box1_grainsource1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="start server" label="Start Server" icon="hicon:/SVGIcons.index?BUTTONS_internet.svg">
    <script scriptType="python"><![CDATA[import hrpyc,lzutil
hrpyc.start_server()
lzutil.copyToClipboard("con, hou = hrpyc.import_remote_module()")]]></script>
  </tool>

  <tool name="LZ QuickVex PyPanel" label="LZ QuickVex PyPanel" icon="hicon:/SVGIcons.index?NETWORKS_vopnet.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.05,0.925];
dx = [0.015,0.4];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))

#pos = (3387, 103)
#size = (727, 1254)

panel = d.createFloatingPanel(hou.paneTabType.PythonPanel,pos,size)
pypanel = panel.paneTabs()[0]
pypanel.setActiveInterface(hou.pypanel.interfaceByName("MegaVEX"))
#pypanel.setActiveInterface(hou.pypanel.interfaceByName("LZ_Vex"))

if kwargs['ctrlclick']:
    vexfunc = panel.panes()[0].createTab(hou.paneTabType.PythonPanel)
    vexfunc.setActiveInterface(hou.pypanel.interfaceByName("gallerer"))
    
    vexpreset = panel.panes()[0].createTab(hou.paneTabType.PythonPanel)
    vexpreset.setActiveInterface(hou.pypanel.interfaceByName("abcPather"))
    
    pypanel.setIsCurrentTab()]]></script>
  </tool>

  <tool name="Create Project" label="Create Project" icon="hicon:/SVGIcons.index?BUTTONS_take.svg">
    <script scriptType="python"><![CDATA[import lzutil
lzutil.setProject()

#import os
## get root dir
#start_dir = hou.text.expandString("$HMEGA") + "/! Projects/"
#answer = hou.ui.selectFile(start_directory=start_dir,file_type=hou.fileType.Directory)
#
#if answer is not '':
#    # Make dirs
#    os.makedirs(answer)
#    os.makedirs(answer + "/hip")
#    os.makedirs(answer + "/flipbook")
#    os.makedirs(answer + "/render")
#    
#    hipname = answer.split("/").pop()
#    
#    hou.appendSessionModuleSource("import lzutil\nlzutil.updateJobFromHipLocation()")
#    
#    hou.hscript('setenv JOBNAME ='+ hipname)
#    print answer
#    hou.hscript('setenv JOB ='+ answer)    
#    
#    hou.hipFile.save(answer + "/hip/" + hipname +".000" +".hip")        
        

    
    
    


        ]]></script>
  </tool>

  <tool name="Reload Textures" label="Reload Textures" icon="SHELF_clear_texture_cache">
    <script scriptType="hscript"><![CDATA[texcache -c
glcache -c]]></script>
  </tool>

  <tool name="fileCache finder" label="FileCache finder" icon="hicon:/SVGIcons.index?SOP_filecache.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.4,0.95];
dx = [0.5,0.8];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))

pos = (3387, 103)
size = (1100, 1254)

panel = d.createFloatingPanel(hou.paneTabType.PythonPanel,pos,size)
pypanel = panel.paneTabs()[0]
pypanel.setActiveInterface(hou.pypanel.interfaceByName('File Cache Finder'))]]></script>
  </tool>

  <tool name="Particle Display Type" label="Particle Display Type" icon="hicon:/SVGIcons.index?POP_property.svg">
    <script scriptType="python"><![CDATA[import toolutils
sv = toolutils.sceneViewer()
vp = sv.curViewport()
settings = vp.settings()

curr_type = settings.particleDisplayType()
points = hou.viewportParticleDisplay.Points
pixels = hou.viewportParticleDisplay.Pixels
disks = hou.viewportParticleDisplay.Discs

new_type = pixels if (curr_type == points) else points
new_type = disks if kwargs["ctrlclick"] else new_type

settings.particleDisplayType( new_type )

]]></script>
  </tool>

  <tool name="OpenJOB" label="OpenJOB" icon="hicon:/SVGIcons.index?SOP_pack.svg">
    <helpText><![CDATA["""click - JOB
ctrl+click - HIP
shift+click - HEXT
alt - Documents
"""]]></helpText>
    <script scriptType="python"><![CDATA[import lzutil
if kwargs['ctrlclick']:
    lzutil.openFolderFromEnv("$HIP")
elif kwargs['shiftclick']:
    lzutil.openFolderFromEnv("$HEXT")
elif kwargs['altclick']:
    lzutil.openFolderFromEnv("$HOUDINI_USER_PREF_DIR") 
else:
    lzutil.openFolderFromEnv("$JOB")]]></script>
  </tool>

  <tool name="Edit LZ Util" label="Edit LZ Util" icon="hicon:/SVGIcons.index?BUTTONS_copy.svg">
    <helpText><![CDATA["""open lzutil.py in notepad
ctrl+click: open lzQuickVEX
alt+click: hscript
shift+click:vexfunc"""]]></helpText>
    <script scriptType="python"><![CDATA[import subprocess
ctrlclick = kwargs["ctrlclick"]
shiftclick = kwargs["shiftclick"]
altclick = kwargs["altclick"]

npp = "C:\\Program Files (x86)\\Notepad++\\notepad++.exe"

lzutils = hou.text.expandString('$HEXT') + "\\scripts\\python\\lzutil.py"
lzquickvex = hou.text.expandString('$HEXT') + "\\lz_quick_vex.txt"
vexfunc = hou.text.expandString('$HEXT') + "\\lz_vexfunc.txt"
hscript = hou.text.expandString('$HEXT') + "\\hscript.txt"

file = lzutils
if ctrlclick:
    file = lzquickvex
elif altclick:
    file = hscript
elif shiftclick:
    file = vexfunc


command = [npp,file]
subprocess.Popen(command)]]></script>
  </tool>

  <tool name="Update JOB" label="Update JOB" icon="hicon:/SVGIcons.index?BUTTONS_down.svg">
    <helpText><![CDATA["""Set project based on current hip location and append project setting to startup scripts"""]]></helpText>
    <script scriptType="python"><![CDATA[import lzutil
ctrlclick = kwargs["ctrlclick"]
if ctrlclick:
    #hou.appendSessionModuleSource("import lzutil\nlzutil.updateJobFromHipLocation()")
    lzutil.updateJobFromHipLocation()
    lzutil.updateJobNameFromHipLocation()
else:
    print ("")
    print("JOBNAME: " + hou.text.expandString('$JOBNAME'))
    print("JOB:     " + hou.text.expandString('$JOB'))
    print("HIP:     " + hou.text.expandString('$HIP'))
    ]]></script>
  </tool>

  <tool name="NodeParms" label="NodeParms" icon="hicon:/SVGIcons.index?BUTTONS_jump_to_line.svg">
    <script scriptType="python"><![CDATA[def createParmWindow(n):
    # create Size and Center
    dy = [0.1,0.95];
    dx = [0.05,0.35];
    import ctypes
    user32 = ctypes.windll.user32
    sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
    pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
    size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))
    
    d = hou.ui.curDesktop()
    
    panel = d.createFloatingPanel(hou.paneTabType.Parm,pos,size)
    tab = panel.paneTabs()[0]
    tab.setCurrentNode(n)
    tab.linkGroup = hou.paneLinkType.Pinned
    
import lzutil,toolutils
for n in hou.selectedNodes():
    lzutil.createParmWindow(n)
    
if hou.selectedNodes()==():
    p = toolutils.sceneViewer().currentNode().parent()
    createParmWindow(p)]]></script>
  </tool>

  <tool name="wrangle" label="Wrangle" icon="hicon:/SVGIcons.index?SOP_attribwrangle.svg">
    <script scriptType="python"><![CDATA[import toolutils
n = toolutils.sceneViewer().currentNode()
#user_input = hou.ui.readInput("Script Name")
#n.createOutputNode('attribwrangle',user_input[1] if user_input[1]!='' else 'script')
print (n)
if n.type().category().name() == 'Object':
    wr = n.createNode('attribwrangle')
elif n.type().category().name() == 'Sop':
    wr = n.createOutputNode('attribwrangle')

wr.setRenderFlag(1)
wr.setDisplayFlag(1)
wr.setCurrent(1)

#wr.setColor(hou.Color(0.475,0.812,0.204))]]></script>
  </tool>

  <tool name="Gallerer" label="Gallerer" icon="hicon:/SVGIcons.index?SHELF_flower.svg">
    <script scriptType="python"><![CDATA[import toolutils
sv = toolutils.sceneViewer()
n = sv.currentNode().parent()


if not kwargs['ctrlclick']:
    if n.node("LZ_gallerer") is None:    
        gal = n.createNode("LZ_gallerer","LZ_gallerer")
        gal.setPosition(hou.Vector2((-20,15)))
        gal.parm("getScripter").pressButton()
    else:
        n.node("LZ_gallerer").parm("scripter").pressButton()
else:
    # Close Gallerer
    if n.node("LZ_gallerer") is not None:
        # Close Floating panel and remove node
        def clean(n):
            pname = n.path().replace('/','_')
            for fp in hou.ui.floatingPanels():
                if fp.name() == pname:
                    fp.close() 
            n.destroy()   
        
        n = n.node("LZ_gallerer")
        clean(n.outputs()[0])  
        clean(n)

]]></script>
  </tool>

  <tool name="volume data" label="Volume Data" icon="hicon:/SVGIcons.index?SOP_volumeanalysis.svg">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    g =  n.geometry()
    for prim in g.prims():
        if prim.type()== hou.primType.VDB:
            name = prim.attribValue("name")
            data = prim.voxelRange(prim.activeVoxelBoundingBox())
            print name+": ", min(data), max(data)
    ]]></script>
  </tool>

  <tool name="makeVerb" label="MakeVerb" icon="hicon:/SVGIcons.index?DATATYPES_code_variable.svg">
    <script scriptType="python"><![CDATA[import hou,lzutil

script = "#VERBScript\n"
script +=  "sops = hou.sopNodeTypeCategory()\n"

for n in hou.selectedNodes():
    if n.verb():
        v = n.verb()
        parms = v.parms()
        v.loadParmsFromNode(n)
        newparms = v.parms()
        
        verbname = n.type().name()
        script += "# " + verbname + ' verb\n'
        script += verbname + "verb" + ' = sops.nodeVerb("' + verbname + '")\n'       
        
        script += verbname + "verb.setParms({\n"               
        for key in parms.keys():
            if  parms[key] != newparms[key]:
                val = str(newparms[key])   
                #if isinstance(newparms[key],basestring)
                if isinstance(newparms[key],str):
                    val = "'" + val + "'"
                script += "\t'" + key + "': " + val + ",\n"  
        script += "\t})\n"   
        script += verbname + "verb.execute(geo, [geo])"
        
    else:
        print( "[WARNING] " + n.type().name() + " has no verb" )

lzutil.copyToClipboard(script)
print (script)

]]></script>
  </tool>

  <tool name="create_ref" label="Create Ref" icon="hicon:/SVGIcons.index?SOP_attribcast.svg">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    print n.parent().type().category().name()
    if n.parent().type().category().name() == 'Object':
        p = n.parent().parent()
        px = p.createNode('geo',"Proxy_" + n.name())
        #px.node('file1').destroy()
        m = px.createNode('object_merge')
        m.parm('objpath1').set(m.relativePathTo(n))
        
        print px
        
        
    ]]></script>
  </tool>

  <tool name="pyhon" label="Pyhton" icon="SOP_python">
    <script scriptType="python"><![CDATA[import toolutils
n = toolutils.sceneViewer().currentNode()
wr = n.createOutputNode('python')
wr.setRenderFlag(1)
wr.setDisplayFlag(1)
wr.setCurrent(1)]]></script>
  </tool>

  <tool name="nulls2Points" label="Nulls2Points" icon="hicon:/SVGIcons.index?SOP_add.svg">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()

obj = hou.node("obj/")
points_holder = obj.createNode('geo','points')
points_holder.moveToGoodPosition()
add = points_holder.createNode('add','points')

add.parm('points').set(len(sel))

i = 0
for n in sel:
    add.parm('usept' + str(i)).set(1)
    add.parmTuple('pt' + str(i)).set(n.parmTuple('t').eval())    
    i += 1
    ]]></script>
  </tool>

  <tool name="AssetBrowser" label="AssetBrowser" icon="hicon:/SVGIcons.index?SOP_agentunpack.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.3,0.9];
dx = [0.05,0.275];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))

panel = d.createFloatingPanel(hou.paneTabType.PythonPanel,pos,size)
pypanel = panel.paneTabs()[0]
pypanel.setActiveInterface(hou.pypanel.interfaceByName("lz_canoe_assets_v2"))]]></script>
  </tool>

  <tool name="load expresions" label="Load Expressions" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[hou.hscript("exread -v $HEXT/hscript.txt")]]></script>
  </tool>

  <tool name="quick_gal" label="QuickGal" icon="hicon:/SVGIcons.index?SHELF_flame_thrower.svg">
    <helpText><![CDATA["""Click : Create Gallery And unpack it
Ctrl + Click : create gallery without unpacking
"""]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils
ctrl_click =  kwargs['ctrlclick']

choices = []
gal_dict = dict()
for g in hou.galleries.galleries():
    gstr = str(g).split("/")[-1].split(".")[0]
    if gstr!= "Geometry" and gstr != "VopMaterials":
        for ge in g.galleryEntries():
            item = gstr + "/" + ge.name()
            choices.append(item)
            gal_dict[item] = ge

ans = hou.ui.selectFromTree(choices,exclusive=True)
if ans is not ():
    ge = gal_dict[ans[0]]
    
    ne = toolutils.networkEditor()
    parent = ne.currentNode()
    if parent.type().name() != 'geo':
        parent = parent.parent()
    n = ge.createChildNode(parent)

    if not ctrl_click:
        # Clean
        for c in n.children():
            for p in c.parms():
                if p.keyframes() != ():
                    if p.isLocked() == False:
                        ex = p.expression()
                        for parm in n.parms():
                            ref = 'ch("../' + p.name() + '")'
                            if ex.find(ref) != -1:
                                p.deleteAllKeyframes()
        # Extract
        n.extractAndDelete()  

]]></script>
  </tool>

  <tool name="Perfomance Monitor" label="Perfomance Monitor" icon="hicon:/SVGIcons.index?CHOP_record.svg">
    <script scriptType="python"><![CDATA[d = hou.ui.curDesktop()

import ctypes
user32 = ctypes.windll.user32
sz = int (user32.GetSystemMetrics(0)),int( user32.GetSystemMetrics(1))
dy = [0.4,0.95];
dx = [0.5,0.8];    

pos = (sz[0]+ int(sz[0]*dx[0]),int(sz[1]*(dy[0])))
size = int(sz[0]*(dx[1] - dx[0])),int(sz[1]*(dy[1]-dy[0]))  
panel = d.createFloatingPanel(hou.paneTabType.PerformanceMonitor,pos,size)]]></script>
  </tool>

  <tool name="LZ N2S" label="LZ N2S" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[script = ''
for n in hou.selectedNodes():
    # CREATION AND POSITION
    # comment
    newline = '#create ' + n.name() + ' node' 
    script += '\n' + newline + '\n'
    # if we have a parent node
    if len(n.inputs()) > 0:
        if not n.inputs()[0].isSelected():
            newline = n.inputs()[0].name() + ' = '
            script += newline + '\n' 
        # create node
        newline = n.name() +' = ' + n.inputs()[0].name() + '.createOutputNode("' + n.type().name() + '","' + n.name() + '")'
        script += newline + '\n'
        # set position
        dpos = n.position() - n.inputs()[0].position()
        newline = n.name() +'.setPosition(' + n.inputs()[0].name() + '.position() + hou.Vector2(' + str(dpos.x()) + ',' +str(dpos.y()) + '))'
        script += newline + '\n'
    else:
        # create node
        if n.parent().path() == '/obj':
            newline = 'obj = hou.node("/obj")'
            script += newline + '\n'
        else :
            newline = n.parent().name() + ' = '
            script += newline + '\n' 
        newline = n.name() +' = ' + n.parent().name() + '.createNode("' + n.type().name() + '","' + n.name() + '")'
        script += newline + '\n'
     
    # PROCESS PARAMETERS    
    for p in n.parms():
        if not p.isAtDefault():
            if type(p) is hou.Parm:
                # Notify if parm is spare
                if p.isSpare():
                    newline = '#This is a Spare Parameter!'
                    script += newline + '\n'
            
                # If parm is keyframed(has an expression) copy it's expression, else only the value
                if p.keyframes() == ():
                    pt = p.parmTemplate()
                    pval = str(p.eval())
                    # if the parm is string -> unexpand it and add double qoutes
                    if pt.dataType() == hou.parmData.String:                
                        pval = repr(p.unexpandedString())
                        #pval = '"' + pval +  '"'
                    newline = n.name() + '.parm("' + p.name() + '").set(' + pval + ')'
                    script += newline + '\n'
                else:
                    lang = p.expressionLanguage()
                    expr = p.expression()
                    newline = n.name() + ".parm('" + p.name() + "').setExpression('" + expr + "',language = hou." + str(p.expressionLanguage()) + ')'
                    script += newline + '\n'
    if n.isDisplayFlagSet():
        newline = n.name() + '.setDisplayFlag(True)'
        script += newline + '\n'

# PRINT SCRIPT AND COPY TO CLIPBOARD
print( script )

#import PySide2.QtGui as qtg
#app = qtg.QApplication.instance()
#clipboard = app.clipboard()
#clipboard.setText(script)

from PySide2.QtWidgets  import  QApplication
QApplication.clipboard().setText(script)



]]></script>
  </tool>

  <tool name="lz_box" label="BOX" icon="hicon:/SVGIcons.index?SOP_box.svg">
    <script scriptType="python"><![CDATA[n = hou.selectedNodes()[0]

import toolutils
sv = toolutils.sceneViewer()
sv.setSnappingMode(hou.snappingMode.Prim)
pos = sv.selectPositions(number_of_positions=2)

minx = min(pos[0].x(),pos[1].x())
maxx = max(pos[0].x(),pos[1].x())
wx = maxx - minx;
tx = minx + wx*0.5;

miny = min(pos[0].y(),pos[1].y())
maxy = max(pos[0].y(),pos[1].y())
wy = maxy - miny;
ty = miny + wy*0.5;

minz = min(pos[0].z(),pos[1].z())
maxz = max(pos[0].z(),pos[1].z())
wz = maxz - minz;
tz = minz + wz*0.5;

dn = n.parent().displayNode()
# change to boolean if you want boolean operation
merge = dn.createOutputNode('merge')
box = merge.createInputNode(1,'box')
box.parmTuple("t").set(hou.Vector3([tx,ty,tz]))
box.parmTuple("size").set(hou.Vector3([wx,wy,wz]))

sv.setSnappingMode(hou.snappingMode.Off)
box.setSelected(True,True)
merge.setDisplayFlag(True)
sv.enterCurrentNodeState()   ]]></script>
  </tool>

  <tool name="box_new" label="Box New" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import toolutils
sv = toolutils.sceneViewer()
n = sv.currentNode()
if n.type().name() == "obj":
    n = n.createNode("geo")
    n.moveToGoodPosition()
if n.type().name() != "geo":
    n = n.parent()

import toolutils
sv = toolutils.sceneViewer()
sv.setSnappingMode(hou.snappingMode.Prim)
pos = sv.selectPositions(number_of_positions=2)

minx = min(pos[0].x(),pos[1].x())
maxx = max(pos[0].x(),pos[1].x())
wx = maxx - minx;
tx = minx + wx*0.5;

miny = min(pos[0].y(),pos[1].y())
maxy = max(pos[0].y(),pos[1].y())
wy = maxy - miny;
ty = miny + wy*0.5;

minz = min(pos[0].z(),pos[1].z())
maxz = max(pos[0].z(),pos[1].z())
wz = maxz - minz;
tz = minz + wz*0.5;

# change to boolean if you want boolean operation
box = n.createNode('box')
box.parmTuple("t").set(hou.Vector3([tx,ty,tz]))
box.parmTuple("size").set(hou.Vector3([wx,wy,wz]))

sv.setSnappingMode(hou.snappingMode.Off)
box.setSelected(True,True)
box.setDisplayFlag(True)
sv.enterCurrentNodeState()   ]]></script>
  </tool>

  <tool name="change_asset_version" label="Change Asset Version" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[for n in hou.selectedNodes():
    p = n.parm("asset_version")
    if p is not None:
        p.set( (p.eval() + 1) % p.parmTemplate().maxValue())
    ]]></script>
  </tool>

  <tool name="Export_Nodes" label="Export Nodes" icon="hicon:/SVGIcons.index?MISC_grimoire.svg">
    <script scriptType="python"><![CDATA[import os
import toolutils

def getCurrentContextNode():
    current_node = toolutils.networkEditor().currentNode()
    if current_node.type().name() == 'geo':
        return current_node
    else:
        return current_node.parent()

def save_nodes():
    nodes = hou.selectedNodes()
    
    filename = hou.ui.selectFile()
    if filename is not "":
        contextnode = nodes[0].parent()
        contextnode.saveChildrenToFile(nodes, [], filename)
        
def load_nodes():
    filename = hou.ui.selectFile()
    n = getCurrentContextNode()
    if os.path.isfile(filename):
        n.loadChildrenFromFile(filename)
        


ctrlclick =  kwargs["ctrlclick"]
if ctrlclick:
    load_nodes()
else:
    save_nodes()
]]></script>
  </tool>

  <tool name="Load_NetBox" label="Load NetBox" icon="hicon:/SVGIcons.index?SOP_name.svg">
    <script scriptType="python"><![CDATA[import lzutil
import os

def load_netbox():
    filename = hou.ui.selectFile(start_directory="S:/CloudStation/Assets/Toolkit/Env")
    n = lzutil.getCurrentContextNode()
    filename = hou.text.expandString(filename)
    if os.path.isfile(filename):
        n.loadItemsFromFile(filename)


def save_netbox():
    for nb in hou.selectedItems():    
        if isinstance(nb,hou.NetworkBox):        
            filename = hou.text.expandString(nb.comment())
            #os.makedirs(os.path.dirname(filename))
            if filename is not "":
                items = list(nb.items()) + [nb]
                nb.parent().saveItemsToFile(items,filename)
        
            
ctrlclick =  kwargs["ctrlclick"]
if ctrlclick:
    save_netbox()
else:
    load_netbox() 

            ]]></script>
  </tool>
</shelfDocument>
